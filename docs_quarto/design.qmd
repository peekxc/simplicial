---
format:
  html:
    code-fold: true
jupyter: python3
execute: 
  freeze: true
  enabled: false
---

# Simplicial Design Philosophy

Suppose you wanted to represent a [combinatorial n-simplex](https://en.wikipedia.org/wiki/Abstract_simplicial_complex). Why not use a built-in [sequence](https://docs.python.org/3/glossary.html#term-sequence) type?

```python
simplex = [0,1,2] # why note use a list? 
```

But wait, simplices are simple value objects, just like strings (`'abc'`) or integers (`123`), which are [immutable](https://docs.python.org/3/faq/design.html#why-are-python-strings-immutable) and [hashable](https://docs.python.org/3/library/collections.abc.html#collections.abc.Hashable). Perhaps a `tuple` then? 

```python
simplex = (0,1,2)
```

But wait, simplices are _set-like_: they have unique entries and are [comparable](https://portingguide.readthedocs.io/en/latest/comparisons.html). But `(0,1,1,1,1,2)` is clearly not a simplex, though it is immutable. How about a set?

```
simplex = set([0,1,2])
```

Sets actually are naturally comparable and have unique entries: 

```python
face = set([1,2])
face <= simplex # True
set([2,1,0,1]) == simplex # True 
```

But ahhh, they are also mutable! How about frozenset? 

```python
simplex = frozenset([0,1,2])
```

Immutable, comparable, unique... this seems fine. Except it's elements are not _homogenous_ 

```
simplex = frozenset([0,1,'a',2,'b'])
```

There's no *technical* reason not use non-type-homogenous vertex sets---however, mixing types may imply different per-element memory layouts, and comparability between elements becomes muddled. 

Indeed, it seems the Python data model [doesn't have an immutable, homogenous, set-like container](https://stackoverflow.com/questions/66874287/python-data-model-type-protocols-magic-methods). 

- [lists](https://docs.python.org/3/library/stdtypes.html#lists) are mutable, non-homogenous, and non-hashable
- [tuples](https://docs.python.org/3/library/stdtypes.html#tuples) are comparable and immutable, but they are not _set like_
- [frozensets](https://docs.python.org/3/library/stdtypes.html#frozenset) are comparable, immutable, and set-like, but are neither homogenous nor ordered
- [SortedSet](https://grantjenks.com/docs/sortedcontainers/sortedset.html) comes close, but is neither _immutable_ nor _hashable_.
- [array](https://docs.python.org/3/library/array.html) & [np.array](https://numpy.org/doc/stable/reference/generated/numpy.array.html) are homogenous but not immutable and not _set like_
- [bytes](https://docs.python.org/3/library/stdtypes.html#bytes) lack only _set like_ functionality---however their values are limited to [0, 255]

There seems to be no built-in Python sequence appropriate for a _simplex_. So, why not make our own! 

## The Simplex Class

```python
class Simplex(Hashable):
  pass
```


As an aside, Python affectuionados may point to the fact that most of the above process of designing a class can be heavily side-stepped using various decorators patterns, like Python's [dataclasses](https://docs.python.org/3/library/dataclasses.html). For example, here's a very similar class to the one above. 

```python
@dataclass(frozen=True)
class Simplex(Collection[int]):
  vertices = field(default_factory=SortedSet, compare=True) 
```

## Simplicial Complexes 

Now that we have a 'nice' representation of a Simplex, let's build a simplicial complex. 

## Performance

And now onto the elephant in the room: let's see how performant our types are. 

```{code-block}

s = Simplex([0,1,2])

```

Now suppose, we replace this with a simple numpy-based solution. 

```{code-block}

```

After all this effort, our class design of a simplex is at best _complex_ and at worst _monolithic_. Although it seems elegant and natural to use, its simply not a very practical from a performance perspective. Indeed, if we're going to be operating on 1e8+ simplices at a time, it's _far more efficient_ to simply stream operations with a \[numpy\] array!

Of course, with the numpy solution, it seems we lose all the structure we built into the classes. Searching takes... This is a seemingly fundamental tradeoff. Why can't we have the best of both worlds?

An entirely different structure, such as a numpy array, may be more performant in some settings... but in others, perhaps a memory efficient solution using the combinatorial number system makes sense. 

## Structural Subtyping & Generics

With all of these types, its clear there are going to be memory and time complexity tradeoffs associated with each type. Searcing might take longer in one, but shorter in the other... One representation might be extremely compact and great for read-only streaming.... another might be more suitable for a time-varying setting, where the underlying complex is constantly changing via simplex insertions, deletions, and reorderings. 

It would be nice to have a interface to unify all of these sturctures, such that primitive operations on them are carried out in a DRY-manner. Ideally, the interface should be minimal---requiring only what is strictly necessary---but also performant, taking advantage of structure wherever it exists. Moreover, the interface should ideally be easily extensible, type flexible, and open source fruendly. 