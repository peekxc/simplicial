## combinatorial.rank_C2 { #combinatorial.rank_C2 }

`combinatorial.rank_C2(i: int, j: int, n: int)`

 --- 

## combinatorial.unrank_C2 { #combinatorial.unrank_C2 }

`combinatorial.unrank_C2(x: int, n: int)`

 --- 

## combinatorial.unrank_lex { #combinatorial.unrank_lex }

`combinatorial.unrank_lex(r: int, k: int, n: int)`

 --- 

## combinatorial.rank_lex { #combinatorial.rank_lex }

`combinatorial.rank_lex(c: Iterable, n: int)`

 --- 

## combinatorial.rank_colex { #combinatorial.rank_colex }

`combinatorial.rank_colex(c: Iterable)`

 --- 

## combinatorial.unrank_colex { #combinatorial.unrank_colex }

`combinatorial.unrank_colex(r: int, k: int)`

Unranks a k-combinations rank 'r' back into the original combination in colex order

From: Unranking Small Combinations of a Large Set in Co-Lexicographic Order

 --- 

## combinatorial.rank_combs { #combinatorial.rank_combs }

`combinatorial.rank_combs(C: Iterable[tuple], n: int = None, order: str = ['colex', 'lex'])`

Ranks k-combinations to integer ranks in either lexicographic or colexicographical order

Parameters: 
  C : Iterable of combinations 
  n : cardinality of the set (lex order only)
  order : the bijection to use

Returns: 
  list : unsigned integers ranks in the chosen order.

 --- 

## combinatorial.unrank_combs { #combinatorial.unrank_combs }

`combinatorial.unrank_combs(R: Iterable[int], k: Union[int, Iterable], n: int = None, order: str = ['colex', 'lex'])`

Unranks integer ranks to  k-combinations in either lexicographic or colexicographical order

Parameters: 
  R : Iterable of integer ranks 
  n : cardinality of the set (lex order only)
  order : the bijection to use

Returns: 
  list : k-combinations derived from R

 --- 

## combinatorial.inverse_choose { #combinatorial.inverse_choose }

`combinatorial.inverse_choose(x: int, k: int)`