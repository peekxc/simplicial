[
  {
    "objectID": "pages/overview.html",
    "href": "pages/overview.html",
    "title": "Overview: Simplicial Complexes",
    "section": "",
    "text": "A simplicial complex S = (V, \\Sigma) is a collection of simplices s \\in \\Sigma satisfying:\n\nEach v \\in V is in S\nIf \\tau \\subset \\sigma and \\sigma \\in S, then \\tau \\in S\n\n\n\n\n\n\n\nTip\n\n\n\nThough highly related, this package is structured for representing abstract simplicial complexes, the purely combinatorial analog to the topological space obtained by ‘gluing’ together simplices.\n\n\n \\Delta = \\{\\sigma \\}\n\n\nkjbakdaok"
  },
  {
    "objectID": "pages/simplextree_ds.html",
    "href": "pages/simplextree_ds.html",
    "title": "Simplex Tree",
    "section": "",
    "text": "Simplex Tree\nThe simplex tree is…\n\n\n\nsimplextree"
  },
  {
    "objectID": "reference/boundary.html",
    "href": "reference/boundary.html",
    "title": "Splex",
    "section": "",
    "text": "boundary(s: Union[SimplexConvertible, ComplexLike], p: int = None, oriented: bool = False, kwargs)\nReturns the boundary of a simplicial object, optionally signed.\nIf s has an existing method s.boundary(p, oriented), then that method is called with additional keyword args kwargs.\nOtherwise, the behavior of this function depends on the type-class of s. Namely, - if s is SimplexLike with dimension p, then a generator enumerating (p-1)-faces of s is created. - if s is ComplexLike, then a sparse boundary matrix whose columns represent boundary chains is returned. - if s is FiltrationLike, then a sparse boundary matrix whose columns represent boundary chains in filtration order is returned."
  },
  {
    "objectID": "reference/card.html",
    "href": "reference/card.html",
    "title": "Splex",
    "section": "",
    "text": "card(s: Union[SimplexConvertible, ComplexLike, FiltrationLike], p: int = None, kwargs)"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "Generic functions\n\n\n\nfaces\nReturns the faces of a simplicial object, optionally restricted by dimension.\n\n\ndim\nReturns the dimension of a simplicial object, suitably defined.\n\n\ncard\n\n\n\nboundary\nReturns the boundary of a simplicial object, optionally signed.\n\n\n\n\n\n\nUnionFind data structure\n\n\n\nUnionFind"
  },
  {
    "objectID": "reference/faces.html",
    "href": "reference/faces.html",
    "title": "Splex",
    "section": "",
    "text": "faces(s: Union[SimplexConvertible, ComplexLike], p: int = None, kwargs)\nReturns the faces of a simplicial object, optionally restricted by dimension.\nIf s has an existing method s.faces(p), then that method is called with additional keyword args kwargs.\nOtherwise, the behavior of this function depends on the type-class of s. Namely, - if s is SimplexLike, then a generator enumerating p-combinations of s is created. - if s is ComplexLike, then a generator enumerating p-faces of s is created. - if s is FiltrationLike, then a generator enumerating p-faces of s in filtration order is created."
  },
  {
    "objectID": "reference/dim.html",
    "href": "reference/dim.html",
    "title": "Splex",
    "section": "",
    "text": "dim(sigma: Union[SimplexConvertible, ComplexLike], kwargs)\nReturns the dimension of a simplicial object, suitably defined."
  },
  {
    "objectID": "reference/UnionFind.html",
    "href": "reference/UnionFind.html",
    "title": "Splex",
    "section": "",
    "text": "UnionFind()"
  }
]