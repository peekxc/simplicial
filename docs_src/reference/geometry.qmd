# geometry { #splex.geometry }

`geometry`

## Functions

| Name | Description |
| --- | --- |
| [as_pairwise_dist](#splex.geometry.as_pairwise_dist) |  |
| [delaunay_complex](#splex.geometry.delaunay_complex) |  |
| [enclosing_radius](#splex.geometry.enclosing_radius) | Returns the smallest 'r' such that the Rips complex on the union of balls of radius 'r' is contractible to a point. |
| [flag_weight](#splex.geometry.flag_weight) | Filter function factory method for constructing flag/clique filter functions.  |
| [lower_star_weight](#splex.geometry.lower_star_weight) | Constructs a simplex-parameterized _Callable_ that evaluates its lower star value based on _x_.  |
| [rips_complex](#splex.geometry.rips_complex) | Constructs the Vietoris-Rips complex from _x_ by unioning balls of diameter at most 2 * _radius_  |
| [rips_filtration](#splex.geometry.rips_filtration) | Constructs a _p_-dimensional rips filtration from _x_ by unioning balls of diameter at most 2 * _radius_ |

### as_pairwise_dist { #splex.geometry.as_pairwise_dist }

`geometry.as_pairwise_dist(x)`

### delaunay_complex { #splex.geometry.delaunay_complex }

`geometry.delaunay_complex(x)`

### enclosing_radius { #splex.geometry.enclosing_radius }

`geometry.enclosing_radius(x)`

Returns the smallest 'r' such that the Rips complex on the union of balls of radius 'r' is contractible to a point.

### flag_weight { #splex.geometry.flag_weight }

`geometry.flag_weight(x, vertex_weights=None)`

Filter function factory method for constructing flag/clique filter functions. 

Parameters: 
  x: point cloud, vector of pairwise weights, or square matrix. 
  vertex_weights: optional weights to use for vertices. Defaults to None, which sets vertex weights to 0.

Returns: 
  callable which takes as input a simplex or set of simplices and returns their clique weights.

### lower_star_weight { #splex.geometry.lower_star_weight }

`geometry.lower_star_weight(x)`

Constructs a simplex-parameterized _Callable_ that evaluates its lower star value based on _x_. 

Vertex labels are assumed to be 0-indexed for now. 

If simplex-like, use 0-indexed vertex labels to index vertex values directly. 

Otherwise assumes a 2d array of simplex labels is given and vectorizes the computation.

### rips_complex { #splex.geometry.rips_complex }

`geometry.rips_complex(x, radius=None, p=1)`

Constructs the Vietoris-Rips complex from _x_ by unioning balls of diameter at most 2 * _radius_ 

Parameters: 
  x: point cloud, pairwise distance vector, or distance matrix
  radius: scale parameter for the Rips complex. 
  p: highest dimension of simplices to consider in the expansion. 

Returns: 
  rips complex, returned as a simplex tree

### rips_filtration { #splex.geometry.rips_filtration }

`geometry.rips_filtration(x, radius=None, p=1, **kwargs)`

Constructs a _p_-dimensional rips filtration from _x_ by unioning balls of diameter at most 2 * _radius_