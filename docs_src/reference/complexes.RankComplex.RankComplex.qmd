# complexes.RankComplex.RankComplex { #splex.complexes.RankComplex.RankComplex }

`complexes.RankComplex.RankComplex(self, simplices=None)`

Simplicial complex represented via the combinatorial number system.

A rank complex is a simplicial complex that uses a correspondence between the natural numbers and simplices, the _combinatorial number system_,
to store simplices as plain integers in contiguous memory. The integers are computed by _ranking_ each simplex, i.e. bijecting each p-simplex to an 
integer in the range [0, comb(n,p+1)).

Computationally, the simplices and their dimensions are stored via ranks as 64-bit/8-bit unsigned integers, respectively, in a structured numpy array.
When needed, their vertex representations are computed on the fly by inverting the correspondence ('unranking'). This process can be prone to overflow due to the 
growth rate of the binomial coefficient---however, for low-dimensional complexes it is fairly safe. In particular, if the vertex labels 
always start from 0, then any _d_-dimensional complex of with _n_ unique vertex labels will be representable without overflow if: 

- _d_ <= 0 and _n_ <= 2**64 - 1
- _d_ <= 1 and _n_ <= ~ 6B 
- _d_ <= 2 and _n_ <= ~ 4.5M 
- _d_ <= 3 and _n_ <= ~ 125K
- _d_ <= 4 and _n_ <= ~ 15K
...

The smallest _n_ that causes overflow for complete complexes is 68, and thus this data structure should be avoided when very 
high-dimensional complexes are needed. 

## Attributes

| Name      | Type   | Description                                                                                                               |
|-----------|--------|---------------------------------------------------------------------------------------------------------------------------|
| simplices |        | structured ndarray of dtype [('rank', uint64), ('dim', uint8)] containing the simplex ranks and dimensions, respectively. |

## Methods

| Name | Description |
| --- | --- |
| [add](#splex.complexes.RankComplex.RankComplex.add) | Adds a simplex and its faces to the complex, if they do not already exist. |
| [card](#splex.complexes.RankComplex.RankComplex.card) |  |
| [cofaces](#splex.complexes.RankComplex.RankComplex.cofaces) |  |
| [dim](#splex.complexes.RankComplex.RankComplex.dim) | The maximal dimension of any simplex in the complex. |
| [discard](#splex.complexes.RankComplex.RankComplex.discard) | Removes simplices from the complex, if they exist. |
| [faces](#splex.complexes.RankComplex.RankComplex.faces) | Enumerates the faces of the complex. |
| [remove](#splex.complexes.RankComplex.RankComplex.remove) | Removes simplices from the complex. They must exist. |

### add { #splex.complexes.RankComplex.RankComplex.add }

`complexes.RankComplex.RankComplex.add(self, item)`

Adds a simplex and its faces to the complex, if they do not already exist.

If _item_ is already in the complex, the underlying complex is not modified.

### card { #splex.complexes.RankComplex.RankComplex.card }

`complexes.RankComplex.RankComplex.card(self, p=None)`

### cofaces { #splex.complexes.RankComplex.RankComplex.cofaces }

`complexes.RankComplex.RankComplex.cofaces(self, item)`

### dim { #splex.complexes.RankComplex.RankComplex.dim }

`complexes.RankComplex.RankComplex.dim(self)`

The maximal dimension of any simplex in the complex.

### discard { #splex.complexes.RankComplex.RankComplex.discard }

`complexes.RankComplex.RankComplex.discard(self, item)`

Removes simplices from the complex, if they exist.

If none of the supplied _simplices_ are in the complex, the simplices are not modified.

### faces { #splex.complexes.RankComplex.RankComplex.faces }

`complexes.RankComplex.RankComplex.faces(self, p=None, **kwargs)`

Enumerates the faces of the complex.

#### Parameters

**p** : <span class='type_annotation'> int, </span>optional (default=None)<p> optional integer indicating which dimension of faces to enumerate. Default to None (enumerates all faces). </p>

#### Returns

**** : <span class='type_annotation'> Iterable[SimplexLike], </span><p> generator which yields on evaluation yields the simplex </p>

### remove { #splex.complexes.RankComplex.RankComplex.remove }

`complexes.RankComplex.RankComplex.remove(self, item)`

Removes simplices from the complex. They must exist.

If any of the supplied _simplices_ are not in the complex, raise a KeyError.